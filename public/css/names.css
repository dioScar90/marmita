.form-check {
  > :is(.form-check-input, .form-check-label) {
    cursor: pointer;
  }

  &:has(.form-check-input:checked)>.form-check-label {
    &::after {
      content: attr(data-ativo);
    }
  }

  &:not(:has(.form-check-input:checked))>.form-check-label {
    font-weight: unset !important;
    color: var(--bs-grey);

    &::after {
      content: attr(data-inativo);
    }
  }
}

#table_names > tbody.for-empty-table {
  display: none !important;

  &:is(:only-of-type, :has(+ tbody:empty)) {
    display: revert !important;
  }

  & td {
    --bs-table-bg-type: unset !important;
  }
}

#table_names > tbody:not(.for-empty-table)  {
  counter-reset: names;

  > tr > th::after {
    counter-increment: names;
    content: counter(names, decimal-leading-zero);
  }

  > tr:first-of-type > td:last-of-type div.col:has(button[data-order="up"]) {
    cursor: not-allowed;

    & button[data-order="up"] {
      pointer-events: none;
      opacity: 0.5;
    }
  }

  > tr:last-of-type > td:last-of-type div.col:has(button[data-order="down"]) {
    cursor: not-allowed;

    & button[data-order="down"] {
      pointer-events: none;
      opacity: 0.5;
    }
  }
}

tr.to-remove {
  opacity: 0;
  font-size: 0;
  margin: 0;
  transition: opacity 0.5s, font-size 0.5s, margin 0.5s;
}

tr.blink {
  animation: blink 0.5s;
}

button[data-sort-names] {
  > i {
    display: none;
  }

  &[data-sort-names="up"] > i.fa-arrow-up-a-z {
    display: unset;
  }

  &[data-sort-names="down"] > i.fa-arrow-down-a-z {
    display: unset;
  }
}

@keyframes blink {
  0% {
    opacity: 0;
    transform: scale(0);
  }
  70% {
    opacity: 1;
    transform: scale(1.1);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
